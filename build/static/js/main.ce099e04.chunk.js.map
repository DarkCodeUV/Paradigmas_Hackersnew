{"version":3,"sources":["components/CreateLink.js","constants.js","components/Header.js","components/Link.js","components/LinkList.js","components/Login.js","components/App.js","serviceWorker.js","index.js"],"names":["CREATE_LINK_MUTATION","gql","CreateLink","history","useHistory","useState","description","url","formState","setFormState","useMutation","variables","onCompleted","push","createLink","onSubmit","e","preventDefault","className","value","onChange","target","type","placeholder","AUTH_TOKEN","Header","authToken","localStorage","getItem","to","onClick","removeItem","Link","props","link","FEED_QUERY","LinkList","data","useQuery","links","map","id","SIGNUP_MUTATION","LOGIN_MUTATION","Login","login","email","password","name","username","tokenAuth","console","log","setItem","token","signup","App","exact","path","component","Boolean","window","location","hostname","match","httpLink","createHttpLink","uri","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6QAMMA,EAAuBC,YAAH,qNAmEXC,EAtDI,WACjB,IAAMC,EAAUC,cAChB,EAAkCC,mBAAS,CACzCC,YAAa,GACbC,IAAK,KAFP,mBAAOC,EAAP,KAAkBC,EAAlB,KAIA,EAAqBC,YAAYV,EAAsB,CACrDW,UAAW,CACTL,YAAaE,EAAUF,YACvBC,IAAKC,EAAUD,KAEpBK,YAAY,kBAAMT,EAAQU,KAAK,QALvBC,EAAP,oBAQA,OACE,8BACE,uBACEC,SAAU,SAACC,GACTA,EAAEC,iBACFH,KAHJ,UAME,sBAAKI,UAAU,uBAAf,UACE,uBACEA,UAAU,MACVC,MAAOX,EAAUF,YACjBc,SAAU,SAACJ,GAAD,OACRP,EAAa,2BACRD,GADO,IAEVF,YAAaU,EAAEK,OAAOF,UAG1BG,KAAK,OACLC,YAAY,+BAEd,uBACEL,UAAU,MACVC,MAAOX,EAAUD,IACjBa,SAAU,SAACJ,GAAD,OACRP,EAAa,2BACRD,GADO,IAEVD,IAAKS,EAAEK,OAAOF,UAGlBG,KAAK,OACLC,YAAY,4BAGhB,wBAAQD,KAAK,SAAb,0B,QCnEKE,EAAa,aCiEXC,EA3DA,WACb,IAAMtB,EAAUC,cACVsB,EAAYC,aAAaC,QAAQJ,GACvC,OACE,sBAAKN,UAAU,yCAAf,UACE,sBAAKA,UAAU,wBAAf,UACE,qBAAKA,UAAU,UAAf,yBACA,cAAC,IAAD,CAAMW,GAAG,IAAIX,UAAU,yBAAvB,iBAIP,qBAAKA,UAAU,MAAf,eACO,cAAC,IAAD,CAAMW,GAAG,OAAOX,UAAU,yBAA1B,iBAGC,qBAAKA,UAAU,MAAf,eAER,cAAC,IAAD,CACSW,GAAG,UACHX,UAAU,yBAFnB,oBAMQQ,GACC,sBAAKR,UAAU,OAAf,UACE,qBAAKA,UAAU,MAAf,eACX,cAAC,IAAD,CACSW,GAAG,UACHX,UAAU,yBAFnB,0BASK,qBAAKA,UAAU,kBAAf,SACGQ,EACC,qBACER,UAAU,oBACVY,QAAS,WACPH,aAAaI,WAAWP,GACxBrB,EAAQU,KAAR,MAJJ,oBAUA,cAAC,IAAD,CACEgB,GAAG,SACHX,UAAU,yBAFZ,yBCxCKc,EAXF,SAACC,GACZ,IAAQC,EAASD,EAATC,KACR,OACE,8BACE,gCACGA,EAAK5B,YADR,KACuB4B,EAAK3B,IAD5B,U,QCAA4B,EAAalC,YAAH,mFA2BDmC,EAhBE,WACb,IAAQC,EAASC,YAASH,GAAlBE,KAER,OACE,8BACGA,GACC,mCACGA,EAAKE,MAAMC,KAAI,SAACN,GAAD,OACd,cAAC,EAAD,CAAoBA,KAAMA,GAAfA,EAAKO,YCnBxBC,EAAkBzC,YAAH,kPAgBf0C,EAAiB1C,YAAH,8LAiHL2C,EArGD,WACZ,IAAMzC,EAAUC,cAChB,EAAkCC,mBAAS,CACzCwC,OAAO,EACPC,MAAO,GACPC,SAAU,GACVC,KAAM,KAJR,mBAAOxC,EAAP,KAAkBC,EAAlB,KAOF,EAAgBC,YAAYiC,EAAgB,CAC1ChC,UAAW,CACTsC,SAAUzC,EAAUsC,MACpBC,SAAUvC,EAAUuC,UAEtBnC,YAAa,YAAoB,IAAjBsC,EAAgB,EAAhBA,UACdC,QAAQC,IAAIF,GACZvB,aAAa0B,QAAQ7B,EAAY0B,EAAUI,OAC3CnD,EAAQU,KAAK,QARVgC,EAAP,oBAYA,EAAiBnC,YAAYgC,EAAiB,CAC5C/B,UAAW,CACTqC,KAAMxC,EAAUwC,KAChBF,MAAOtC,EAAUsC,MACjBC,SAAUvC,EAAUuC,UAEtBnC,YAAa,YAAiB,IAAd2C,EAAa,EAAbA,OACd5B,aAAa0B,QAAQ7B,EAAY+B,EAAOD,OACxCnD,EAAQU,KAAK,QARV0C,EAAP,oBAWE,OACE,gCACE,oBAAIrC,UAAU,MAAd,SACGV,EAAUqC,MAAQ,QAAU,YAE/B,sBAAK3B,UAAU,mBAAf,WACIV,EAAUqC,OACV,uBACE1B,MAAOX,EAAUwC,KACjB5B,SAAU,SAACJ,GAAD,OACRP,EAAa,2BACRD,GADO,IAEVwC,KAAMhC,EAAEK,OAAOF,UAGnBG,KAAK,OACLC,YAAY,cAGhB,uBACEJ,MAAOX,EAAUsC,MACjB1B,SAAU,SAACJ,GAAD,OACRP,EAAa,2BACRD,GADO,IAEVsC,MAAO9B,EAAEK,OAAOF,UAGpBG,KAAK,OACLC,YAAY,uBAEd,uBACEJ,MAAOX,EAAUuC,SACjB3B,SAAU,SAACJ,GAAD,OACRP,EAAa,2BACRD,GADO,IAEVuC,SAAU/B,EAAEK,OAAOF,UAGvBG,KAAK,WACLC,YAAY,8BAGhB,sBAAKL,UAAU,WAAf,UAEN,wBACIA,UAAU,qBACVY,QAAStB,EAAUqC,MAAQA,EAAQU,EAFvC,SAIK/C,EAAUqC,MAAQ,QAAU,mBAE/B,wBACE3B,UAAU,iBACVY,QAAS,SAACd,GAAD,OACPP,EAAa,2BACRD,GADO,IAEVqC,OAAQrC,EAAUqC,UALxB,SAUSrC,EAAUqC,MACP,6BACA,oCCrGCW,EAnBH,WACV,OACE,sBAAKtC,UAAU,aAAf,UACE,cAAC,EAAD,IACA,qBAAKA,UAAU,0BAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,cAAC,IAAD,CACEqB,OAAK,EACLC,KAAK,UACLC,UAAWzD,IAEtB,cAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,SAASC,UAAWf,aCpBnBgB,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCQFC,EAAWC,YAAe,CAC9BC,IAAK,wCAGDC,EAAS,IAAIC,IAAa,CAC9BnC,KAAM+B,EACNK,MAAO,IAAIC,MAGbC,IAASC,OACP,cAAC,IAAD,UACE,cAACC,EAAA,EAAD,CAAgBN,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SD0FlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.ce099e04.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation, gql } from '@apollo/client';\nimport { useHistory } from 'react-router';\n\n\n\nconst CREATE_LINK_MUTATION = gql`\n  mutation CreateLink(\n    $description: String!\n    $url: String!\n  ) {\n    createLink(description: $description, url: $url) {\n      id\n      url\n      description\n    }\n  }\n`;\n\nconst CreateLink = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    description: '',\n    url: ''\n  });\n  const [createLink] = useMutation(CREATE_LINK_MUTATION, {\n    variables: {\n      description: formState.description,\n      url: formState.url\n    },\n\tonCompleted:() => history.push('/') \n  });\n\n  return (\n    <div>\n      <form\n        onSubmit={(e) => {\n          e.preventDefault();\n          createLink();\n        }}\n      >\n        <div className=\"flex flex-column mt3\">\n          <input\n            className=\"mb2\"\n            value={formState.description}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                description: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"A description for the link\"\n          />\n          <input\n            className=\"mb2\"\n            value={formState.url}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                url: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"The URL for the link\"\n          />\n        </div>\n        <button type=\"submit\">Submit</button>\n      </form>\n    </div>\n  );\n};\n\nexport default CreateLink;\n","export const AUTH_TOKEN = 'auth-token';\n","import React from 'react';\nimport { useHistory } from 'react-router';\n//import { Link, withRouter } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport { AUTH_TOKEN } from '../constants';\n\nconst Header = () => {\n  const history = useHistory();\n  const authToken = localStorage.getItem(AUTH_TOKEN);\n  return (\n    <div className=\"flex pa1 justify-between nowrap orange\">\n      <div className=\"flex flex-fixed black\">\n        <div className=\"fw7 mr1\">Hacker News</div>\n        <Link to=\"/\" className=\"ml1 no-underline black\">\n          new\n        </Link>\n\t\n\t<div className=\"ml1\">|</div>\n        <Link to=\"/top\" className=\"ml1 no-underline black\">\n          top\n        </Link>\n         <div className=\"ml1\">|</div>\n        \n\t<Link\n          to=\"/search\"\n          className=\"ml1 no-underline black\"\n        >\n          search\n        </Link>\n        {authToken && (\n          <div className=\"flex\">\n            <div className=\"ml1\">|</div>\n\t<Link\n          to=\"/create\"\n          className=\"ml1 no-underline black\"\n        >\n         submit\n            </Link>\n          </div>\n        )}\n      </div>\n      <div className=\"flex flex-fixed\">\n        {authToken ? (\n          <div\n            className=\"ml1 pointer black\"\n            onClick={() => {\n              localStorage.removeItem(AUTH_TOKEN);\n              history.push(`/`);\n            }}\n          >\n            logout\n          </div>\n        ) : (\n          <Link\n            to=\"/login\"\n            className=\"ml1 no-underline black\"\n          >\n            login\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React  from 'react';\n\nconst Link = (props) => {\n  const { link } = props;\n  return (\n    <div>\n      <div>\n        {link.description} ({link.url})\n      </div>\n    </div>\n  );\n};\n\nexport default Link;\n","import React from 'react';\nimport Link from './Link';\n\n\nimport { gql, useQuery } from '@apollo/client';\n\nconst FEED_QUERY = gql`\n   \n {\n  links{\n  id\n  url\n  description\n  }\n}\n`;\n\nconst LinkList = () => {\n    const { data } = useQuery(FEED_QUERY);\n\n    return (\n      <div>\n        {data && (\n          <>\n            {data.links.map((link) => (\n              <Link key={link.id} link={link} />\n            ))}\n          </>\n        )}\n      </div>\n    );\n  };\n\nexport default LinkList;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { useMutation, gql } from '@apollo/client';\nimport { AUTH_TOKEN } from '../constants';\n\n\nconst SIGNUP_MUTATION = gql`\n  mutation SignupMutation(\n    $email: String!\n    $password: String!\n    $name: String!\n  ) {\n    signup(\n      email: $email\n      password: $password\n      name: $name\n    ) {\n      token\n    }\n  }\n`;\n\nconst LOGIN_MUTATION = gql`\n  mutation TokenAuth(\n    $username: String!\n    $password: String!\n  ) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\n\nconst Login = () => {\n  const history = useHistory();\n  const [formState, setFormState] = useState({\n    login: true,\n    email: '',\n    password: '',\n    name: ''\n  });\n\nconst [login] = useMutation(LOGIN_MUTATION, {\n  variables: {\n    username: formState.email,\n    password: formState.password\n  },\n  onCompleted: ({ tokenAuth }) => {\n    console.log(tokenAuth);\n    localStorage.setItem(AUTH_TOKEN, tokenAuth.token);\n    history.push('/');\n  }\n});\n\nconst [signup] = useMutation(SIGNUP_MUTATION, {\n  variables: {\n    name: formState.name,\n    email: formState.email,\n    password: formState.password\n  },\n  onCompleted: ({ signup }) => {\n    localStorage.setItem(AUTH_TOKEN, signup.token);\n    history.push('/');\n  }\n});\n  return (\n    <div>\n      <h4 className=\"mv3\">\n        {formState.login ? 'Login' : 'Sign Up'}\n      </h4>\n      <div className=\"flex flex-column\">\n        {!formState.login && (\n          <input\n            value={formState.name}\n            onChange={(e) =>\n              setFormState({\n                ...formState,\n                name: e.target.value\n              })\n            }\n            type=\"text\"\n            placeholder=\"Your name\"\n          />\n        )}\n        <input\n          value={formState.email}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              email: e.target.value\n            })\n          }\n          type=\"text\"\n          placeholder=\"Your email address\"\n        />\n        <input\n          value={formState.password}\n          onChange={(e) =>\n            setFormState({\n              ...formState,\n              password: e.target.value\n            })\n          }\n          type=\"password\"\n          placeholder=\"Choose a safe password\"\n        />\n      </div>\n      <div className=\"flex mt3\">\n\n<button\n    className=\"pointer mr2 button\"\n    onClick={formState.login ? login : signup}\n  >\n    {formState.login ? 'login' : 'create account'}\n  </button>\n  <button\n    className=\"pointer button\"\n    onClick={(e) =>\n      setFormState({\n        ...formState,\n        login: !formState.login\n      })\n    }\n  >\n\n          {formState.login\n            ? 'need to create an account?'\n            : 'already have an account?'}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport CreateLink from './CreateLink';\nimport Header from './Header';\nimport LinkList from './LinkList';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './Login';\n\n\nconst App = () => {\n  return (\n    <div className=\"center w85\">\n      <Header />\n      <div className=\"ph3 pv1 background-gray\">\n        <Switch>\n          <Route exact path=\"/\" component={LinkList} />\n          <Route\n            exact\n            path=\"/create\"\n            component={CreateLink}\n          />\n\t<Route exact path=\"/login\" component={Login} />\n        </Switch>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\t\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport {\n  ApolloProvider,\n  ApolloClient,\n  createHttpLink,\n  InMemoryCache\n} from '@apollo/client';\n\nconst httpLink = createHttpLink({\n  uri: 'http://35.232.232.192:8086/graphql/'\n});\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <BrowserRouter>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}